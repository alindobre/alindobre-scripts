PATH=/tools/bin:/bin:/usr/bin

VER_binutils=2.24
VER_gcc=4.9.1
VER_mpfr=3.1.2
VER_gmp=6.0.0
VER_mpc=1.0.2
VER_linux=3.16.2
VER_glibc=2.20
VER_ncurses=5.9
VER_bash=4.3
VER_bzip2=1.0.6
VER_coreutils=8.23
VER_diffutils=3.3
VER_file=5.19
VER_findutils=4.4.2
VER_gawk=4.1.1
VER_gettext=0.19.2
VER_grep=2.20
VER_gzip=1.6
VER_m4=1.4.17
VER_make=4.0
VER_patch=2.7.1
VER_perl=5.20.0
VER_sed=4.2.2
VER_tar=1.28
VER_texinfo=5.2
VER_utillinux=2.25.1
VER_xz=5.0.5
VER_pkgconfig=0.28
VER_openssl=1.0.2
VER_polarssl=1.3.9
VER_curl=7.40.0
VER_rsync=3.1.1

prepare() {
	pushd $LFS/sources >/dev/null
	clean
	tar xf $1-$2.tar.?z*
	pushd $1-$2 >/dev/null
}

clean() {
	find $LFS/sources -mindepth 1 -maxdepth 1 -type d -exec rm -rf "{}" \; 2>/dev/null
}

lfs_binutils_1() {
	prepare binutils $VER_binutils
	mkdir -v ../binutils-build
	cd ../binutils-build
	../binutils-$VER_binutils/configure     \
			--prefix=/tools            \
			--with-sysroot=$LFS        \
			--with-lib-path=/tools/lib \
			--target=$LFS_TGT          \
			--disable-nls              \
			--disable-werror
	make
	make install
	clean
}

lfs_gcc_1() {
	prepare gcc $VER_gcc
	tar -xf ../mpfr-$VER_mpfr.tar.xz
	mv -v mpfr-$VER_mpfr mpfr
	tar -xf ../gmp-${VER_gmp}a.tar.xz
	mv -v gmp-$VER_gmp gmp
	tar -xf ../mpc-$VER_mpc.tar.gz
	mv -v mpc-$VER_mpc mpc
	for file in \
	 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
	do
		cp -uv $file{,.orig}
		sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
				-e 's@/usr@/tools@g' $file.orig > $file
		echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
		touch $file.orig
	done
	sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
	sed -i 's/if \((code.*))\)/if (\1 \&\& \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c
	mkdir -v ../gcc-build
	cd ../gcc-build
	../gcc-$VER_gcc/configure                               \
			--target=$LFS_TGT                                \
			--prefix=/tools                                  \
			--with-sysroot=$LFS                              \
			--with-newlib                                    \
			--without-headers                                \
			--with-local-prefix=/tools                       \
			--with-native-system-header-dir=/tools/include   \
			--disable-nls                                    \
			--disable-shared                                 \
			--disable-multilib                               \
			--disable-decimal-float                          \
			--disable-threads                                \
			--disable-libatomic                              \
			--disable-libgomp                                \
			--disable-libitm                                 \
			--disable-libquadmath                            \
			--disable-libsanitizer                           \
			--disable-libssp                                 \
			--disable-libvtv                                 \
			--disable-libcilkrts                             \
			--disable-libstdc++-v3                           \
			--enable-languages=c,c++
	make
	make install
	clean
}

lfs_linux_headers() {
	prepare linux $VER_linux
	make INSTALL_HDR_PATH=dest headers_install
	cp -rv dest/include/* /tools/include
	clean
}

lfs_glibc() {
	prepare glibc $VER_glibc
	if [ ! -r /usr/include/rpc/types.h ]; then
		su -c 'mkdir -pv /usr/include/rpc'
		su -c 'cp -v sunrpc/rpc/*.h /usr/include/rpc'
	fi
	mkdir -v ../glibc-build
	cd ../glibc-build
	../glibc-$VER_glibc/configure                             \
				--prefix=/tools                               \
				--host=$LFS_TGT                               \
				--build=$(../glibc-$VER_glibc/scripts/config.guess) \
				--disable-profile                             \
				--enable-kernel=2.6.32                        \
				--with-headers=/tools/include                 \
				libc_cv_forced_unwind=yes                     \
				libc_cv_ctors_header=yes                      \
				libc_cv_c_cleanup=yes
	make
	make install
	echo 'main(){}' > dummy.c
	$LFS_TGT-gcc dummy.c
	readelf -l a.out | grep ': /tools'
	clean
}

lfs_libstdcpp() {
	prepare gcc $VER_gcc
	mkdir -pv ../gcc-build
	cd ../gcc-build
	../gcc-$VER_gcc/libstdc++-v3/configure \
			--host=$LFS_TGT                 \
			--prefix=/tools                 \
			--disable-multilib              \
			--disable-shared                \
			--disable-nls                   \
			--disable-libstdcxx-threads     \
			--disable-libstdcxx-pch         \
			--with-gxx-include-dir=/tools/$LFS_TGT/include/c++/$VER_gcc
	make
	make install
	clean
}

lfs_binutils_2() {
	prepare binutils $VER_binutils
	mkdir -v ../binutils-build
	cd ../binutils-build
	CC=$LFS_TGT-gcc                \
	AR=$LFS_TGT-ar                 \
	RANLIB=$LFS_TGT-ranlib         \
	../binutils-$VER_binutils/configure     \
			--prefix=/tools            \
			--disable-nls              \
			--disable-werror           \
			--with-lib-path=/tools/lib \
			--with-sysroot
	make
	make install
	make -C ld clean
	make -C ld LIB_PATH=/lib/shared:/lib/static:/lib
	cp -v ld/ld-new /tools/bin
	clean
}

lfs_gcc_2() {
	prepare gcc $VER_gcc
	tar -xf ../mpfr-$VER_mpfr.tar.xz
	mv -v mpfr-$VER_mpfr mpfr
	tar -xf ../gmp-${VER_gmp}a.tar.xz
	mv -v gmp-$VER_gmp gmp
	tar -xf ../mpc-$VER_mpc.tar.gz
	mv -v mpc-$VER_mpc mpc
	cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
		`dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h
	for file in \
	 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
	do
		cp -uv $file{,.orig}
		sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
				-e 's@/usr@/tools@g' $file.orig > $file
		echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  	touch $file.orig
	done
	sed -i 's/if \((code.*))\)/if (\1 \&\& \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c
	mkdir -v ../gcc-build
	cd ../gcc-build
	CC=$LFS_TGT-gcc                                      \
	CXX=$LFS_TGT-g++                                     \
	AR=$LFS_TGT-ar                                       \
	RANLIB=$LFS_TGT-ranlib                               \
	../gcc-$VER_gcc/configure                               \
			--prefix=/tools                                  \
			--with-local-prefix=/tools                       \
			--with-native-system-header-dir=/tools/include   \
			--enable-languages=c,c++                         \
			--disable-libstdcxx-pch                          \
			--disable-multilib                               \
			--disable-bootstrap                              \
			--disable-libgomp
	make
	make install
	ln -sv gcc /tools/bin/cc
	echo 'main(){}' > dummy.c
	cc dummy.c
	readelf -l a.out | grep ': /tools'
	clean
}

lfs_ncurses() {
	prepare ncurses $VER_ncurses
	./configure --prefix=/tools \
			--with-shared   \
			--without-debug \
			--without-ada   \
			--enable-widec  \
			--enable-overwrite
	make
	make install
	clean
}

lfs_bash() {
	prepare bash $VER_bash
	./configure --prefix=/tools --without-bash-malloc
	make
	make install
	ln -sv bash /tools/bin/sh
	clean
}

lfs_bzip2() {
	prepare bzip2 $VER_bzip2
	make PREFIX=/tools install
	clean
}

lfs_coreutils() {
	prepare coreutils $VER_coreutils
	FORCE_UNSAFE_CONFIGURE=1 ./configure --prefix=/tools --enable-install-program=hostname
	make
	make install
	clean
}

lfs_diffutils() {
	prepare diffutils $VER_diffutils
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_file() {
	prepare file $VER_file
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_findutils() {
	prepare findutils $VER_findutils
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_gawk() {
	prepare gawk $VER_gawk
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_gettext() {
	prepare gettext $VER_gettext
	cd gettext-tools
	EMACS="no" ./configure --prefix=/tools --disable-shared
	make -C gnulib-lib
	make -C src msgfmt
	make -C src msgmerge
	make -C src xgettext
	cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin
	clean
}

lfs_grep() {
	prepare grep $VER_grep
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_gzip() {
	prepare gzip $VER_gzip
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_m4() {
	prepare m4 $VER_m4
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_make() {
	prepare make $VER_make
	./configure --prefix=/tools --without-guile
	make
	make install
	clean
}

lfs_patch() {
	prepare patch $VER_patch
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_perl() {
	prepare perl $VER_perl
	sh Configure -des -Dprefix=/tools -Dlibs=-lm
	make
	cp -v perl cpan/podlators/pod2man /tools/bin
	mkdir -pv /tools/lib/perl5/5.20.0
	cp -Rv lib/* /tools/lib/perl5/5.20.0
	clean
}

lfs_sed() {
	prepare sed $VER_sed
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_tar() {
	prepare tar $VER_tar
	FORCE_UNSAFE_CONFIGURE=1 ./configure --prefix=/tools
	make
	make install
	clean
}

lfs_texinfo() {
	prepare texinfo $VER_texinfo
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_utillinux() {
	prepare util-linux $VER_utillinux
	./configure --prefix=/tools                \
			--without-python               \
			--disable-makeinstall-chown    \
			--without-systemdsystemunitdir \
			PKG_CONFIG=""
	make
	make install
	clean
}

lfs_xz() {
	prepare xz $VER_xz
	./configure --prefix=/tools
	make
	make install
	clean
}

lfs_pkgconfig() {
	prepare pkg-config $VER_pkgconfig
	./configure --prefix=/tools --with-internal-glib
	make
	make install
	clean
}

lfs_polarssl() {
	pushd $LFS/sources >/dev/null
	clean
	tar xf polarssl-$VER_polarssl-gpl.tgz
	pushd polarssl-$VER_polarssl
	make PREFIX=/tools
	make install
	clean
}

lfs_openssl() {
	prepare openssl $VER_openssl
	./config --prefix=/tools shared
	make -j1
	make -j1 install
	clean
}

lfs_curl() {
	prepare curl $VER_curl
	./configure --prefix=/tools --with-polarssl
	make
	make install
	clean
}

lfs_rsync() {
	prepare rsync $VER_rsync
	./configure --prefix=/tools
	make
	make install
	clean
}

a() {
: mkdir -vp $LFS/sources
pushd $LFS/sources
: wget http://linuxfromscratch.org/lfs/downloads/7.6/wget-list
: wget http://linuxfromscratch.org/lfs/downloads/7.6/md5sums
: wget --no-check-certificate -i wget-list -P $LFS/sources
: md5sum -c md5sums
: wget ftp://ftp.gnu.org/gnu/nettle/nettle-$VER_nettle.tar.gz
: wget ftp://ftp.gnutls.org/gcrypt/gnutls/v3.3/gnutls-$VER_gnutls.tar.xz
: wget http://openssl.org/source/openssl-$VER_openssl.tar.gz
: wget --no-check-certificate https://polarssl.org/download/polarssl-1.3.9-gpl.tgz
: wget http://curl.haxx.se/download/curl-$VER_curl.tar.gz
: wget --no-check-certificate https://rsync.samba.org/ftp/rsync/rsync-$VER_rsync.tar.gz
popd
: mkdir -vp $LFS/tools/lib
: ln -sv $LFS/tools /
: ln -sv lib /tools/lib64

lfs_binutils_1
lfs_gcc_1
lfs_linux_headers
lfs_glibc
lfs_libstdcpp
lfs_binutils_2
lfs_gcc_2
lfs_ncurses
lfs_bash
lfs_bzip2
lfs_coreutils
lfs_diffutils
lfs_file
lfs_findutils
lfs_gawk
lfs_gettext
lfs_grep
lfs_gzip
lfs_m4
lfs_make
lfs_patch
lfs_perl
lfs_sed
lfs_tar
lfs_texinfo
lfs_utillinux
lfs_xz
: lfs_pkgconfig
: lfs_openssl
lfs_polarssl
lfs_curl
lfs_rsync
}
